%YAML 1.2
---
# https://www.sublimetext.com/docs/3/syntax.html
# https://github.com/IonoclastBrigham/firth
name: :Firth
file_extensions: [firth]
scope: source.firth

variables:
  stdelim: '^|\s'
  endelim: '\s|$'
  escapechar: '\\[rntv\\]|%[%bsqdxXfo]'

contexts:
  prototype:
    - include: comments

  main:
    - include: colon-defs
    - include: word-consumers
    - include: stack-manip
    - include: stack-values
    - include: strings
    - include: comments
    - include: scalars
    - include: storage
    - include: control-flow
    - include: fallback-words

  comments:
    - match: (?<={{stdelim}})//(?={{endelim}})
      scope: punctuation.definition.comment.firth
      push:
        - meta_scope: comment.line.double-slash.firth
        - match: $\n?
          pop: true
    - match: (?<={{stdelim}})TODO:(?={{endelim}})
      scope: punctuation.definition.comment.firth
      push:
        - meta_scope: comment.line.todo.firth
        - match: $\n?
          pop: true
    - match: (?<={{stdelim}})\(--\)(?={{endelim}})
      scope: comment.block.firth
    - include: paren_comment
  paren_comment:
    - meta_include_prototype: false
    - match: (?<=\)|{{stdelim}})(\(--\))?\((..?:)?\s
      scope: punctuation.definition.comment.firth
      push:
        - meta_scope: comment.block.firth
        - match: \(
          push: simple_matched_parens
        - match: \)
          pop: true
  simple_matched_parens:
    # keep whatever scope we were previously in
    - meta_include_prototype: false
    - match: \(
      push: simple_matched_parens
    - match: \)
      pop: true

  colon-defs:
    - match: (?<={{stdelim}})(:)\s+(\S+)
      captures:
        1: storage.type.function.begin.firth
        2: entity.name.function.firth
      push:
        - meta_scope: meta.function.firth
        - match: (?<={{stdelim}})(;\S*|interpret buildfunc)
          scope: storage.type.function.end.firth
          pop: true
        - include: main
    - match: (?<={{stdelim}}):\((?={{endelim}})
      scope: storage.type.function.begin.firth
      push:
        - meta_scope: meta.function.lambda.firth
        - match: (?<={{stdelim}})\);(?={{endelim}})
          scope: storage.type.function.end.firth
          pop: true
        - match: (?<={{stdelim}})\)\[\d+\];(?={{endelim}})
          scope: storage.type.function.lambda.end.firth
          pop: true
        - include: main

  word-consumers:
    # not including strings, comments, variable declarations, or colon-defs
    - meta_include_prototype: false
    - match: (?<={{stdelim}})(postpone|#!|'|alias:)\s+(\S+)
      captures:
        1: keyword.firth
        2: entity.name.function.firth

  stack-manip:
    - match: (?<={{stdelim}})([23]?dup|[23]?drop|nip|over|clear|swap|-?rot|pivot|pick|roll|shove|yank|chop|height|C>|>C|Cswap)(?={{endelim}})
      scope: keyword.control.firth

  stack-values:
    - match: (?<={{stdelim}})\[\](?={{endelim}})
      scope: variable.other.stack.firth
    - match: (?<={{stdelim}})\[\](@|>|swap|clear)(?={{endelim}})
      scope: keyword.operator.stack.firth
    - match: (?<={{stdelim}})>\[\](?={{endelim}})
      scope: keyword.operator.stack.firth

  storage:
    - match: (?<={{stdelim}})(@@?|!!?)(?={{endelim}})
      scope: keyword.operator.accessor.firth
    - match: (?<={{stdelim}})(=:?|va[lr]:|const:|delete)\s(\S+)(?={{endelim}})
      captures:
        1: keyword.operator.assign.firth
        2: entity.name.variable.firth
    - match: (?<={{stdelim}})(\?[?.])(?={{endelim}})
      scope: keyword.operator.optional-chaining.firth

  escapes:
    - match: ({{escapechar}})
      scope: constant.character.escape.firth
  strings:
    - match: "(?<={{stdelim}})`\\s+\\S+"
      # TODO: push so we can include escapes
      scope: string.unquoted.firth
    - match: "(?<={{stdelim}})({{escapechar}})"
      scope: string.unquoted.firth
    - match: (?<={{stdelim}})(\.?char\s+)({{escapechar}}|\S)(\S*)
      # TODO: push so we can include escapes
      captures:
        1: string.unquoted.firth
        2: string.unquoted.firth
        3: comment.line.firth
    - match: '(?<={{stdelim}})((\.\S*)?")\s'
      scope: punctuation.definition.string.quoted.begin.firth
      push:
        - meta_include_prototype: false
        - meta_scope: string.quoted.firth
        - include: escapes
        - match: '"'
          scope: punctuation.definition.string.quoted.end.firth
          pop: true
    - match: '(?<={{stdelim}})("")\s'
      captures:
        1: punctuation.definition.string.quoted.double.begin.firth
      push:
        - meta_include_prototype: false
        - meta_scope: string.quoted.double.firth
        - include: escapes
        - match: '""'
          scope: punctuation.definition.string.quoted.double.end.firth
          pop: true
    - match: (?<={{stdelim}})(assert)(")(?={{endelim}})
      captures:
        1: keyword.assert.firth
        2: punctuation.definition.string.quoted.begin.firth
      push:
        - meta_include_prototype: false
        - meta_scope: string.quoted.firth
        - include: escapes
        - match: '"'
          scope: punctuation.definition.string.quoted.end.firth
          pop: true

  scalars:
    # numbers
    - match: (?i)(?<={{stdelim}})([-+]?(?:\.\d+|\d+\.?\d*)(?:e[-+]?\d+)?)(?={{endelim}})
      scope: constant.numeric.firth
    - match: (?i)(?<={{stdelim}})(0x\h+)(?={{endelim}})
      scope: constant.numeric.firth
    - match: (?i)(?<={{stdelim}})(0b[01]+)(?={{endelim}})
      scope: constant.numeric.firth
    - match: (?<={{stdelim}})([+-]?inf)(?={{endelim}})
      scope: constant.language.infinity.firth
    - match: (?<={{stdelim}})nan(?={{endelim}})
      scope: constant.language.nan.firth
    # booleans
    - match: (?<={{stdelim}})true(?={{endelim}})
      scope: constant.language.boolean.true.firth
    - match: (?<={{stdelim}})false(?={{endelim}})
      scope: constant.language.boolean.false.firth
    # refs
    - match: (?<={{stdelim}})nil(?={{endelim}})
      scope: constant.language.nil.firth

  control-flow:
    - match: (?<={{stdelim}})if(?={{endelim}})
      scope: keyword.control.conditional.firth
      push:
        - meta_scope: meta.block.control.firth
        - match: (?=else)
          pop: true
        - include: main
    - match: (?<={{stdelim}})else(?={{endelim}})
      scope: keyword.control.conditional.firth
      push:
        - meta_scope: meta.block.control.firth
        - include: main
    - match: (?<={{stdelim}})for|forever|while|each|eachstack|mapstack(?={{endelim}})
      scope: keyword.control.loop.firth
      push:
        - meta_scope: meta.block.control.firth
        - include: main
    - match: (?<={{stdelim}})try(?={{endelim}})
      scope: keyword.control.trycatch.firth
      push:
        - meta_scope: meta.block.control.firth
        - match: (?=catch)
          pop: true
        - include: main
    - match: (?<={{stdelim}})catch(?={{endelim}})
      scope: keyword.control.loop.firth
      push:
        - meta_scope: meta.block.control.firth
        - include: main
    - match: (?<={{stdelim}})end(?={{endelim}})
      scope: keyword.control.end.firth
      pop: true

  fallback-words:
    - match: (?<={{stdelim}})\S+(?={{endelim}})
      scope: variable.function.firth
