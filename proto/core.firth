char @file:core.firth drop
char @see:comment_block_below_for_copyright_notice drop

char : create compile
	char %s parse create compile
	interpret buildfunc bindfunc
: %s
	char %s cpush
	interpret buildfunc dup bindfunc immediate
: word
	%s parse
	interpret buildfunc bindfunc
: postpone
	word ccall
	interpret buildfunc dup bindfunc immediate
: ;
	postpone interpret buildfunc bindfunc
	interpret buildfunc dup bindfunc immediate
: ;immed
	postpone interpret buildfunc dup bindfunc immediate
	interpret buildfunc dup bindfunc immediate

: skipch  -1 backtrack ;
: 2skipch -2 backtrack ;
: " skipch char " parse cpush skipch ;immed
: parseline " ^[^\n]*" fmt parsematch ;
: // parseline drop ;immed // There, now we can comment our code!

// /////////////////////////////////////////////////////////////////////////////
// core.firth
// Core library for low level code and compiler manipulation
//
// Copyright Â© 2015-2021 Brigham Toskin
// This file is part of the :Firth language reference implementation. Usage
// and redistribution of this software is governed by the terms of a modified
// MIT-style license. You should have received a copy of the license with the
// source distribution; if not, you may find it online at:
// <https://github.com/IonoclastBrigham/firth/blob/master/LICENSE.firth>
//
// Formatting:
//	utf-8 ; unix ; 80 cols ; tabwidth 4
// /////////////////////////////////////////////////////////////////////////////

// text and parsing words
: ( 1 backtrack " %b()" parsematch
	dup countlines
	compiling if srcappend else drop end
	;immed ( ( nestable) parentheses)
: (--) ;immed // empty signature coment
: (C:  2 backtrack postpone ( ;immed
: (--)(C: postpone (C: ;immed // empty signature coment
: (TS: 3 backtrack postpone ( ;immed
: (--)(TS: postpone (TS: ;immed
: (CB: 3 backtrack postpone ( ;immed // compile buf
: (--)(CB: postpone (CB: ;immed
: TODO: (TS: .*\n) postpone // ;immed  TODO: add to list with file/line/word?
: ` ( -- word )(TS: word ) word cpush ;immed
: ' ( -- xt )  (TS: word ) word lookup cpush ;immed
: " skipch ` [^"]* parsematch cpush skipch ;immed // redefine for empty strings
: "" ( -- s ) ` (.-)"" parsematch trim cpush ;immed
: >string ( x -- s ) Lua.tostring ;

// some basic arithmetic operators
: + ( a b -- a+b ) char + cbinop ;immed
: - ( a b -- a-b ) char - cbinop ;immed
: * ( a b -- a*b ) char * cbinop ;immed
: / ( a b -- a/b ) char / cbinop ;immed
: % ( a b -- a%b ) char % cbinop ;immed
: ** ( a b -- a^b ) char ^ cbinop ;immed // use ** because ^ is bit-wise xor

// some basic boolean operators
: > ( a b -- a>b ) char > cbinop ;immed
: < ( a b -- a<b ) char < cbinop ;immed
: = ( a b -- a==b ) " ==" cbinop ;immed
: >= ( a b -- a>=b ) " >=" cbinop ;immed
: <= ( a b -- a<=b ) " <=" cbinop ;immed
: ~= ( a b -- a!=b ) " ~=" cbinop ;immed

: 2not ( a b -- ~a ~b) swap not swap not ;
: && ( a b -- a&&b ) " and" cbinop ;immed
: || ( a b -- a||b ) " or" cbinop ;immed
: ^^ ( a b -- aXORb ) postpone 2not postpone ~= ;immed
: ~&& ( a b -- !a&&b ) postpone and not ;immed
: ~|| ( a b -- !a||b ) postpone or not ;immed

// loop and iteration
// : loops ( n -- ) 1 push " swap" call postpone for " drop" call ;immed

// some higher level stack manipulations
: nip ( a b -- b ) swap drop ;
: 2dup ( a b -- a b a b ) over over ;
: 3dup ( a b c -- a b c a b c ) 2 pick 2 pick 2 pick ;
// : ndup ( n*x n -- 2n*x ) dup loops dup pick swap end drop ;
: 2drop ( a b -- ) drop drop ;
: 3drop ( a b c -- ) drop drop drop ;
// : ndrop ( n*x n -- ) loops drop end ;
: ?drop ( x b -- x? ) if drop end ;

// a few parser/interpreter/compiler control words
(
: ccall: word cpush " ccall" ccall ;immed
: ?deferred ( entry -- )
	" name" @@ dup
	create compile // create and start compiling overriding def
		` compiling cpush `lookup ccall postpone if
			lookup ccall // encode a call to original word
		postpone else
			xt execute // exec compiling word, so it can compile to new def
		postpone end
	postpone ;immed
	;
: ;defer   postpone interpret buildfunc dup bindfunc ?deferred ;immed
)
// : eval: ( -- i*x )(TS: word ) postpone ' execute  ;immed
: xt ( {word} -- xt ) ` xt @@ nip ;
: xt? ( x -- b ) Lua.type ` function = ;
: xt?exec ( * x -- * ) dup xt? if execute end ;
: 2word ( -- s1 s2 ) word word ;
: #! (--)(TS: word) word lookup execute ;immed

// values and variables
: >bool ( x -- b ) not not ;
: executable? ( x -- b )
	dup Lua.type ` function =
	dup if nip else
		drop Lua.getmetatable
		dup if ` __call @@ >bool else drop false end
	end
	;
: ! ( x name -- ) dictionary swap !! drop ;
// : @ ( entry -- x ) DATA @@ nip ;  TODO: is this a thing anymore?
: const ( x name -- )
	create compile
	cpush ' cpush ccall
	postpone ;immed
	TODO: guard against re-binding `name`?
	;
: const: (--)(TS: word x ) 2word resolve xt?exec swap cpush const ;immed
: alias: (--)(TS: new old )
	2word 2dup lookup swap !
	( "new" "old" ) immediates swap @@
	( "new"  imm? ) immediates rot !! drop
	;immed
// : variable ( name -- entry ) create dup does> NOP ;
// : var: ( x -- ) word variable ! ;immed
// : val: ( x -- ) word variable ! last does> @ ;immed

// strings and i/o
const: \r char \r
const: \n char \n
const: \t char \t
const: \v char \v
const: SPACE "  "

: . ( x -- ) >string .raw SPACE .raw ;
: .. ( x1 x2 -- ) swap . . ;
: .char (--)(TS: ch) postpone char ' . ccall ;immed
: ." ( -- )(TS: "s") postpone " ' . ccall ;immed
: .fmt ( * s -- s' ) fmt .raw ;
: .fmt" ( * -- )(TS: "s") postpone " ' .fmt ccall ;immed
: .CR (--) \n .raw ;
: .2CR (--) \n \n .raw .raw ;
: .line ( x -- ) >string .raw .CR ;
: .x ( n -- ) " 0x%x " .fmt ;
: .X ( n -- ) " 0X%X " .fmt ;
: .C (C: x -- ) C> . ;
: .TAB (--) \t .raw ;
: printstack ( * -- ) .fmt" \n<==[ " .S .char ] .CR ;
: see ( word -- )
	dup meta swap @@ ( -- word entry? )
	dup if nip else drop lookup meta swap @@ end ( -- entry? )
	dup not if
		drop
	else
		.char : dup ` name @@ .
		` srcbuf @@ each nip . end
	end ;
: see: (--)(TS: word ) word see ;immed

// miscellaneous util words and stuff
: NOP ;immed
alias: NOOP NOP
// : calls: (--) postpone ` " calledby" @@ nip foreach drop " \tcalledby". . .CR end ;
// : calledby: (--) postpone ` " calls" @@ nip foreach drop " \tcalls"   . . .CR end ;

alias: add +
alias: sub -
alias: mul *
alias: div /
alias: mod %
alias: pow **
// : percent ( n p -- n*(p/100) ) postpone 100/  postpone * ;immed
: isnan? ( n -- b ) dup = not ;
: sign ( n -- -1|0|1|nan )
	dup 0 > 1   ( -- n b 1 )       && // collapse
	over 0 < -1 ( -- n 1|#f b -1 ) && // collapse
		||      ( -- n -1|1|#f )
	swap || ;

alias: greater? >
alias: less? <
alias: equal? =
alias: greatereq? >=
alias: lesseq? <=
alias: noteq? ~=

alias: and &&
alias: or ||
alias: xor ^^
alias: nand ~&&
alias: nor ~||

alias: & Lua.bit.band
alias: | Lua.bit.bor
alias: ^ Lua.bit.bxor
alias: ~ Lua.bit.bnot

// util and type queries
alias: type Lua.type

// control and os words
alias: exit Lua.os.exit
: bye ( * -- )
	printstack
	.fmt" Goodbye ðŸ–¤\n"
	0 exit
	;

// copyright, version, banner
: Copyright (--)
	` Copyright create compile
		` Copyright cpush parseline trim cpush ' .. ccall ' .2CR ccall
		buildfunc dup bindfunc
	xt ccall
	false immediates ` Copyright !! drop
	;immed
" LICENSE.firth" runfile
alias: Â© Copyright
const: VERSION " pre-alpha3"
: banner (--) ." :Firth ver." VERSION . .char | Â© ;
